name: Build Cross-Platform Executables

# 触发条件：推送到 main 分支时
on:
  push:
    branches: [ "master" ]

# 工作任务
jobs:
  build:
    # 使用 strategy/matrix 在三个操作系统上并行运行
    strategy:
      matrix:
        os: [ubuntu-21.04, macos-latest, windows-latest]

    # 根据矩阵选择虚拟机
    runs-on: ${{ matrix.os }}

    steps:
    # 步骤 1：检出您的代码到虚拟机
    - name: Checkout repository
      uses: actions/checkout@v4

    # 步骤 2：设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # 您可以根据需要更改版本

    # 步骤 3：安装依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 步骤 4：根据不同操作系统，运行定制化的 PyInstaller 命令

    # 4.1: Windows 打包命令
    - name: Build Windows Executable
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --noconsole --name "Freenove_Car_ESP32_Windows" `
                    --icon="image/Freenove.ico" `
                    --add-data "Client_Ui.ui;." `
                    --add-data "image;image" `
                    main.py
    
    # 4.2: macOS 打包命令
    - name: Build macOS Application
      if: runner.os == 'macOS'
      run: |
        pyinstaller --onefile --noconsole --name "Freenove_Car_ESP32_Mac" \
                    --icon="image/Freenove.ico" \
                    --add-data "Client_Ui.ui:." \
                    --add-data "image:image" \
                    main.py

    # 4.3: Linux 打包命令
    - name: Build Linux Executable
      if: runner.os == 'Linux'
      run: |
        pyinstaller --onefile --noconsole --name "Freenove_Car_ESP32_Linux" \
                    --icon="image/Freenove.ico" \
                    --add-data "Client_Ui.ui:." \
                    --add-data "image:image" \
                    main.py

    # 步骤 5：上传打包好的产物
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}
        path: dist/